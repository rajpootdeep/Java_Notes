connect --user=myUser --password=myPass --url tcp://localhost:61616

----------------------------------------------------------------------   Create Message broker  ------------------------------------------------

PS D:\ActiveMQ\apache-artemis-2.31.2\bin> ./artemis create /D:\MqBroker/demoBroker

Creating ActiveMQ Artemis instance at: D:\MqBroker\demoBroker

--user:
What is the default username?
admin

--password: is mandatory with this configuration:
What is the default password?


--allow-anonymous | --require-login:
Allow anonymous access?, valid values are Y, N, True, False
Y

Auto tuning journal ...
done! Your system can make 1.13 writes per millisecond, your journal-buffer-timeout will be 884000

You can now start the broker by executing:

   "D:\MqBroker\demoBroker\bin\artemis" run

Or you can setup the broker as Windows service and run it in the background:

   "D:\MqBroker\demoBroker\bin\artemis-service.exe" install
   "D:\MqBroker\demoBroker\bin\artemis-service.exe" start

   To stop the windows service:
      "D:\MqBroker\demoBroker\bin\artemis-service.exe" stop

   To uninstall the windows service
      "D:\MqBroker\demoBroker\bin\artemis-service.exe" uninstall



PS D:\ActiveMQ\apache-artemis-2.31.2\bin> cd D:\MqBroker\demoBroker\bin


PS D:\MqBroker\demoBroker\bin> ./artemis run


MqBroker/demoBroker/etc/\jolokia-access.xml]
2024-01-06 18:42:35,509 INFO  [org.apache.activemq.artemis] AMQ241001: HTTP Server started at http://localhost:8161
2024-01-06 18:42:35,509 INFO  [org.apache.activemq.artemis] AMQ241002: Artemis Jolokia REST API available at http://localhost:8161/console/jolokia
2024-01-06 18:42:35,509 INFO  [org.apache.activemq.artemis] AMQ241004: Artemis Console available at http://localhost:8161/console


-----------------------------------------------------------------------------   JMS  -----------------------------------------------------------------------------

Java Message Service API is messanging standard that allows appliaction components based on J2EE to create send receive and read messages. It enabled distributed communication that is loosely coupled and Asynchronous.

JMS API support two distinct models :
		
				1. Point-to-point
				2. Publish-and-subscribe

JNDI (Java Naming and Directory Interface) - 

MOM (Message Oriented Middleware) - 

Elements -

JMS Provider - An implementation of the JMS interface for message-oriented middleware

JMS client - An application or process that produces and /or receives messages.

JMS producer/publisher - A JMS clients that receives messages.

JMS consumer/subscriber  - A JMS client that receives messages.

JMS message - An Object that contains the data being transferred between JMS clients.

JMS queue - A staging area that contains messages that has been sent and are waiting to be read(by only one consumer).  

		Queue is a kind of pool where all messages will arrive from one Java application 

JMS topic - A distribution mechanism for publishing messages that are delivered to multiple subscribers.
		
		

Provider implementations 

To use JMS, one must have a JMS provider that can manage the sessions, queues and topics. 




artemis create /C:/Users/HP/Downloads/mb


artemis-service.exe run 

JMS Destination - it is an  object that represents the target of messages that the client produces and the source of messages that the client consumes.
In PTP destination represents queues; in pub/sub messaging , destination repsresents topics.

The JMS client can use a single destination object to put messages on and to get messages from.


Message =  Message Header + Message Properties + Message Body / Payload

MessageID and CorrelationID are to link the request and response.

JMS Headers : these JMS headers can be used for message filter

		JMSDeliveryMode
		JMSPriority
		JMSMessageID
		JMSCOrrelationID
		JMSType

----------------------------------------------------------------------     Message Types -------------------------------------------------------

TextMessage  - String

ByteMessage  - stream of uninterpreted bytes

ObjectMessage  - serialize object

StreamMessage -  stream of primitive values

MapMessage  - set of name/value pair



----------------------------------------------------------------------  P2P Messanging  ----------------------------------------------------------
Use in case of -


1. One to One communication , message reading happens only once.

2. Throughput/Performance 

3. QueueBrowser - Any application can simply browse through the message without reading them.



--------------------------------------------------------------   Pub/Sub  --------------------------------------------------------------------

Publisher/Subscribers


Durable Subscription -

SharedConsumer  -

-------------------------------------------------------------------  Filter the message  --------------------------------------------------------

-------------------------------------------------------  Message Acknowledgements --------------------------------------------------------------

AUTO_ACKNOWLEDGE

CLIENT_ACKNOWLEDGE

DUPS_OK_ACKNOWLEDG


##########################################################################################################################################


-------------------------------------------------------------  Spring JMS  --------------------------------------------------------------


JmsTemplate - : 




