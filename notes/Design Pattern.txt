----------------------------------------------------------------  SOLID Principles  ------------------------------------------------------------







Single Responsibility Principle  - one class have one responsibility only one

Open Closed Principle   -  Shape - triangle - Circle

Liskov Substitution Principle  - A derived class instance can substitute a parent class instance.  - Bird - penguin 

Interface Segregation Priciple   -  Printer interface - print(),scan(),fax()

Dependency Inversion Principle   - High level module should not depend on low level module, A high level and low level module, both should depend on abstraction, abstraction should not depend on implementation, implementation should depend on abstraction  - Database - UserService(Core business logic)




---------------------------------------------------------------- UML Diagram ----------------------------------------------------------------------



----------------------------------------------------- Topics  -------------------------------------------------------------------------------------

Parking Lot

Snake and ladders

chess

Ludo

tic tac to

BookMyShow


ATM

Elevator System

Vending Machine


Hotel Management

Car Rental

Designing - Typehead, File System, Cricbuzz, LinkedIn, JIRA


Splitwise

RateLimiter

Messaging Queue Distributed Cache
 



-----------------------------------------------------------------  Design Pattern   ------------------------------------------------------------


https://sourcemaking.com/design_patterns










Creational Design Pattern


*Abstract Factory  

*Factory Method  

*Builder 1 -  here happens method chainig || data inconsistent can be solved by this pattern, and client not to remember the order of arguement || Use case when : 1. There are too optional arguements
 
Object Pool

Prototype

*Singleton  


Structural Design Pattern



*Adapter

Bridge

Composite

*Decorator 1 inheritence, add funtionality at run time

Facade

Flyweight

Private Class Data

Proxy



Behavioral Design Pattern




*Chain Of Responsibility

Command

Interpreter

*Iterator 

Mediator


Memento

*Null Object 

*Observer - one is subject and another will be observer , observer will observe when subject/observable changed it's state

*State  if we have to change the behavior of object based on its state

Strategy

Template Method

Visitor

J2EE patterns:

MVC Pattern
Data Access Object pattern
Front controller pattern
Intercepting filter pattern
Transfer object pattern

---------------------------------------------------------------------
Design Pattern for Microservices -: 



1. Strangler Fig Pattern
2. API Gateway Pattern
3. Backends for Frontends Pattern (BFF)
4. Service Discovery Pattern
5. Circuit Breaker Pattern  -  @CircuitBreaker(name = "userService", fallbackMethod = "fallbackGetUser")
6. Bulkhead Pattern
7. Retry Pattern - @Retry(name = "userService", fallbackMethod = "fallbackGetUser")
8. Sidecar Pattern
9. Saga Pattern  - to maintain transaction consistency, 1. choregraphy based saga pattern and 2. Orchestrator based saga pattern(Centralized)
10. Event-Driven Architecture Pattern
11. CQRS (Command Query Responsibility Segregation) Pattern
12. Configuration Externalization Pattern - external configuration of application like yml files, env variable or Config server



